Problem statement :
You are given an integer ‘N’, you need to find whether it’s a good number or not.

We start from the integer ‘N’ and keep replacing the current number with the sum of squares of its digits, we keep repeating this process until we will the number 1. A number that generates the 1 after finite repetition of the above process is called a good number.

Example :
If ‘N’ = 7,

Then we start with the integer 7 and replace it with (7 * 7) = 49.
The new number is 49, we replace it with (4 * 4) + (9 * 9) = 97.
We replace this new number 97 with (9 * 9) + (7 * 7) = 130.
We replace this new number 130 with (1 * 1) + (3 * 3) + (0 * 0) = 10.
We replace this new number 10 with (1 * 1) + (0 * 0) = 1.

Therefore, the original number 7 is a good number. 
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 ≤ ‘T’ ≤ 10      
1 ≤ N ≤ 10000    

Time limit: 1 sec
Sample Input 1 :
2
7
2
Sample Output 1 :
true
false

Explanation For Sample Input 1 :
For test case 1 :
We will print “true” because:
We start with the input integer 7 and replace it with (7 * 7) = 49.
The new number is 49, we replace it with (4 * 4) + (9 * 9) = 97.
We replace this new number 97 with (9 * 9) + (7 * 7) = 130.
We replace this new number 130 with (1 * 1) + (3 * 3) + (0 * 0) = 10.
We replace this new number 10 with (1 * 1) + (0 * 0) = 1.
Therefore, the original number 7 is a good number.

For test case 2 : 
We will print “false” because:
If we start replacing the number 2 with the sum of the square of its digits then we will not be able to reach the number 1 even after infinite steps.
Sample Input 2 :
2
1
1045
Sample Output 2 :
true
false
